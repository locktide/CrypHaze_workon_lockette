// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CH_HashFiles/CHHashFileVSalted.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MFNHashFileSaltedProtobuf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MFNHashFileSaltedProtobuf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MFNHashFileSaltedProtobuf_SaltedHash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MFNHashFileSaltedProtobuf_SaltedHash_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CHHashFileVSalted_2eproto() {
  protobuf_AddDesc_CHHashFileVSalted_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CHHashFileVSalted.proto");
  GOOGLE_CHECK(file != NULL);
  MFNHashFileSaltedProtobuf_descriptor_ = file->message_type(0);
  static const int MFNHashFileSaltedProtobuf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNHashFileSaltedProtobuf, hash_length_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNHashFileSaltedProtobuf, salt_length_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNHashFileSaltedProtobuf, salted_hash_value_),
  };
  MFNHashFileSaltedProtobuf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MFNHashFileSaltedProtobuf_descriptor_,
      MFNHashFileSaltedProtobuf::default_instance_,
      MFNHashFileSaltedProtobuf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNHashFileSaltedProtobuf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNHashFileSaltedProtobuf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MFNHashFileSaltedProtobuf));
  MFNHashFileSaltedProtobuf_SaltedHash_descriptor_ = MFNHashFileSaltedProtobuf_descriptor_->nested_type(0);
  static const int MFNHashFileSaltedProtobuf_SaltedHash_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNHashFileSaltedProtobuf_SaltedHash, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNHashFileSaltedProtobuf_SaltedHash, salt_),
  };
  MFNHashFileSaltedProtobuf_SaltedHash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MFNHashFileSaltedProtobuf_SaltedHash_descriptor_,
      MFNHashFileSaltedProtobuf_SaltedHash::default_instance_,
      MFNHashFileSaltedProtobuf_SaltedHash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNHashFileSaltedProtobuf_SaltedHash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFNHashFileSaltedProtobuf_SaltedHash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MFNHashFileSaltedProtobuf_SaltedHash));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CHHashFileVSalted_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MFNHashFileSaltedProtobuf_descriptor_, &MFNHashFileSaltedProtobuf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MFNHashFileSaltedProtobuf_SaltedHash_descriptor_, &MFNHashFileSaltedProtobuf_SaltedHash::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CHHashFileVSalted_2eproto() {
  delete MFNHashFileSaltedProtobuf::default_instance_;
  delete MFNHashFileSaltedProtobuf_reflection_;
  delete MFNHashFileSaltedProtobuf_SaltedHash::default_instance_;
  delete MFNHashFileSaltedProtobuf_SaltedHash_reflection_;
}

void protobuf_AddDesc_CHHashFileVSalted_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027CHHashFileVSalted.proto\"\275\001\n\031MFNHashFil"
    "eSaltedProtobuf\022\031\n\021hash_length_bytes\030\001 \001"
    "(\r\022\031\n\021salt_length_bytes\030\002 \001(\r\022@\n\021salted_"
    "hash_value\030\003 \003(\0132%.MFNHashFileSaltedProt"
    "obuf.SaltedHash\032(\n\nSaltedHash\022\014\n\004hash\030\001 "
    "\001(\t\022\014\n\004salt\030\002 \001(\t", 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CHHashFileVSalted.proto", &protobuf_RegisterTypes);
  MFNHashFileSaltedProtobuf::default_instance_ = new MFNHashFileSaltedProtobuf();
  MFNHashFileSaltedProtobuf_SaltedHash::default_instance_ = new MFNHashFileSaltedProtobuf_SaltedHash();
  MFNHashFileSaltedProtobuf::default_instance_->InitAsDefaultInstance();
  MFNHashFileSaltedProtobuf_SaltedHash::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CHHashFileVSalted_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CHHashFileVSalted_2eproto {
  StaticDescriptorInitializer_CHHashFileVSalted_2eproto() {
    protobuf_AddDesc_CHHashFileVSalted_2eproto();
  }
} static_descriptor_initializer_CHHashFileVSalted_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MFNHashFileSaltedProtobuf_SaltedHash::kHashFieldNumber;
const int MFNHashFileSaltedProtobuf_SaltedHash::kSaltFieldNumber;
#endif  // !_MSC_VER

MFNHashFileSaltedProtobuf_SaltedHash::MFNHashFileSaltedProtobuf_SaltedHash()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MFNHashFileSaltedProtobuf_SaltedHash::InitAsDefaultInstance() {
}

MFNHashFileSaltedProtobuf_SaltedHash::MFNHashFileSaltedProtobuf_SaltedHash(const MFNHashFileSaltedProtobuf_SaltedHash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MFNHashFileSaltedProtobuf_SaltedHash::SharedCtor() {
  _cached_size_ = 0;
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MFNHashFileSaltedProtobuf_SaltedHash::~MFNHashFileSaltedProtobuf_SaltedHash() {
  SharedDtor();
}

void MFNHashFileSaltedProtobuf_SaltedHash::SharedDtor() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (salt_ != &::google::protobuf::internal::kEmptyString) {
    delete salt_;
  }
  if (this != default_instance_) {
  }
}

void MFNHashFileSaltedProtobuf_SaltedHash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MFNHashFileSaltedProtobuf_SaltedHash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MFNHashFileSaltedProtobuf_SaltedHash_descriptor_;
}

const MFNHashFileSaltedProtobuf_SaltedHash& MFNHashFileSaltedProtobuf_SaltedHash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CHHashFileVSalted_2eproto();  return *default_instance_;
}

MFNHashFileSaltedProtobuf_SaltedHash* MFNHashFileSaltedProtobuf_SaltedHash::default_instance_ = NULL;

MFNHashFileSaltedProtobuf_SaltedHash* MFNHashFileSaltedProtobuf_SaltedHash::New() const {
  return new MFNHashFileSaltedProtobuf_SaltedHash;
}

void MFNHashFileSaltedProtobuf_SaltedHash::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
    if (has_salt()) {
      if (salt_ != &::google::protobuf::internal::kEmptyString) {
        salt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MFNHashFileSaltedProtobuf_SaltedHash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_salt;
        break;
      }
      
      // optional string salt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_salt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_salt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->salt().data(), this->salt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MFNHashFileSaltedProtobuf_SaltedHash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hash(), output);
  }
  
  // optional string salt = 2;
  if (has_salt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->salt().data(), this->salt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->salt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MFNHashFileSaltedProtobuf_SaltedHash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hash(), target);
  }
  
  // optional string salt = 2;
  if (has_salt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->salt().data(), this->salt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->salt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MFNHashFileSaltedProtobuf_SaltedHash::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }
    
    // optional string salt = 2;
    if (has_salt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->salt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MFNHashFileSaltedProtobuf_SaltedHash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MFNHashFileSaltedProtobuf_SaltedHash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MFNHashFileSaltedProtobuf_SaltedHash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MFNHashFileSaltedProtobuf_SaltedHash::MergeFrom(const MFNHashFileSaltedProtobuf_SaltedHash& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_salt()) {
      set_salt(from.salt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MFNHashFileSaltedProtobuf_SaltedHash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MFNHashFileSaltedProtobuf_SaltedHash::CopyFrom(const MFNHashFileSaltedProtobuf_SaltedHash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MFNHashFileSaltedProtobuf_SaltedHash::IsInitialized() const {
  
  return true;
}

void MFNHashFileSaltedProtobuf_SaltedHash::Swap(MFNHashFileSaltedProtobuf_SaltedHash* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(salt_, other->salt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MFNHashFileSaltedProtobuf_SaltedHash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MFNHashFileSaltedProtobuf_SaltedHash_descriptor_;
  metadata.reflection = MFNHashFileSaltedProtobuf_SaltedHash_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MFNHashFileSaltedProtobuf::kHashLengthBytesFieldNumber;
const int MFNHashFileSaltedProtobuf::kSaltLengthBytesFieldNumber;
const int MFNHashFileSaltedProtobuf::kSaltedHashValueFieldNumber;
#endif  // !_MSC_VER

MFNHashFileSaltedProtobuf::MFNHashFileSaltedProtobuf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MFNHashFileSaltedProtobuf::InitAsDefaultInstance() {
}

MFNHashFileSaltedProtobuf::MFNHashFileSaltedProtobuf(const MFNHashFileSaltedProtobuf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MFNHashFileSaltedProtobuf::SharedCtor() {
  _cached_size_ = 0;
  hash_length_bytes_ = 0u;
  salt_length_bytes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MFNHashFileSaltedProtobuf::~MFNHashFileSaltedProtobuf() {
  SharedDtor();
}

void MFNHashFileSaltedProtobuf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MFNHashFileSaltedProtobuf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MFNHashFileSaltedProtobuf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MFNHashFileSaltedProtobuf_descriptor_;
}

const MFNHashFileSaltedProtobuf& MFNHashFileSaltedProtobuf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CHHashFileVSalted_2eproto();  return *default_instance_;
}

MFNHashFileSaltedProtobuf* MFNHashFileSaltedProtobuf::default_instance_ = NULL;

MFNHashFileSaltedProtobuf* MFNHashFileSaltedProtobuf::New() const {
  return new MFNHashFileSaltedProtobuf;
}

void MFNHashFileSaltedProtobuf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_length_bytes_ = 0u;
    salt_length_bytes_ = 0u;
  }
  salted_hash_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MFNHashFileSaltedProtobuf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hash_length_bytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_length_bytes_)));
          set_has_hash_length_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_salt_length_bytes;
        break;
      }
      
      // optional uint32 salt_length_bytes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_salt_length_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &salt_length_bytes_)));
          set_has_salt_length_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_salted_hash_value;
        break;
      }
      
      // repeated .MFNHashFileSaltedProtobuf.SaltedHash salted_hash_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_salted_hash_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_salted_hash_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_salted_hash_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MFNHashFileSaltedProtobuf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hash_length_bytes = 1;
  if (has_hash_length_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hash_length_bytes(), output);
  }
  
  // optional uint32 salt_length_bytes = 2;
  if (has_salt_length_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->salt_length_bytes(), output);
  }
  
  // repeated .MFNHashFileSaltedProtobuf.SaltedHash salted_hash_value = 3;
  for (int i = 0; i < this->salted_hash_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->salted_hash_value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MFNHashFileSaltedProtobuf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hash_length_bytes = 1;
  if (has_hash_length_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hash_length_bytes(), target);
  }
  
  // optional uint32 salt_length_bytes = 2;
  if (has_salt_length_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->salt_length_bytes(), target);
  }
  
  // repeated .MFNHashFileSaltedProtobuf.SaltedHash salted_hash_value = 3;
  for (int i = 0; i < this->salted_hash_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->salted_hash_value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MFNHashFileSaltedProtobuf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hash_length_bytes = 1;
    if (has_hash_length_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash_length_bytes());
    }
    
    // optional uint32 salt_length_bytes = 2;
    if (has_salt_length_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->salt_length_bytes());
    }
    
  }
  // repeated .MFNHashFileSaltedProtobuf.SaltedHash salted_hash_value = 3;
  total_size += 1 * this->salted_hash_value_size();
  for (int i = 0; i < this->salted_hash_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->salted_hash_value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MFNHashFileSaltedProtobuf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MFNHashFileSaltedProtobuf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MFNHashFileSaltedProtobuf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MFNHashFileSaltedProtobuf::MergeFrom(const MFNHashFileSaltedProtobuf& from) {
  GOOGLE_CHECK_NE(&from, this);
  salted_hash_value_.MergeFrom(from.salted_hash_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash_length_bytes()) {
      set_hash_length_bytes(from.hash_length_bytes());
    }
    if (from.has_salt_length_bytes()) {
      set_salt_length_bytes(from.salt_length_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MFNHashFileSaltedProtobuf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MFNHashFileSaltedProtobuf::CopyFrom(const MFNHashFileSaltedProtobuf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MFNHashFileSaltedProtobuf::IsInitialized() const {
  
  return true;
}

void MFNHashFileSaltedProtobuf::Swap(MFNHashFileSaltedProtobuf* other) {
  if (other != this) {
    std::swap(hash_length_bytes_, other->hash_length_bytes_);
    std::swap(salt_length_bytes_, other->salt_length_bytes_);
    salted_hash_value_.Swap(&other->salted_hash_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MFNHashFileSaltedProtobuf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MFNHashFileSaltedProtobuf_descriptor_;
  metadata.reflection = MFNHashFileSaltedProtobuf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
