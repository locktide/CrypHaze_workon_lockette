// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CHHashFileVSalted.proto

#ifndef PROTOBUF_CHHashFileVSalted_2eproto__INCLUDED
#define PROTOBUF_CHHashFileVSalted_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CHHashFileVSalted_2eproto();
void protobuf_AssignDesc_CHHashFileVSalted_2eproto();
void protobuf_ShutdownFile_CHHashFileVSalted_2eproto();

class MFNHashFileSaltedProtobuf;
class MFNHashFileSaltedProtobuf_SaltedHash;

// ===================================================================

class MFNHashFileSaltedProtobuf_SaltedHash : public ::google::protobuf::Message {
 public:
  MFNHashFileSaltedProtobuf_SaltedHash();
  virtual ~MFNHashFileSaltedProtobuf_SaltedHash();
  
  MFNHashFileSaltedProtobuf_SaltedHash(const MFNHashFileSaltedProtobuf_SaltedHash& from);
  
  inline MFNHashFileSaltedProtobuf_SaltedHash& operator=(const MFNHashFileSaltedProtobuf_SaltedHash& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MFNHashFileSaltedProtobuf_SaltedHash& default_instance();
  
  void Swap(MFNHashFileSaltedProtobuf_SaltedHash* other);
  
  // implements Message ----------------------------------------------
  
  MFNHashFileSaltedProtobuf_SaltedHash* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MFNHashFileSaltedProtobuf_SaltedHash& from);
  void MergeFrom(const MFNHashFileSaltedProtobuf_SaltedHash& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string hash = 1;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 1;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const char* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  
  // optional string salt = 2;
  inline bool has_salt() const;
  inline void clear_salt();
  static const int kSaltFieldNumber = 2;
  inline const ::std::string& salt() const;
  inline void set_salt(const ::std::string& value);
  inline void set_salt(const char* value);
  inline void set_salt(const char* value, size_t size);
  inline ::std::string* mutable_salt();
  inline ::std::string* release_salt();
  
  // @@protoc_insertion_point(class_scope:MFNHashFileSaltedProtobuf.SaltedHash)
 private:
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_salt();
  inline void clear_has_salt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* hash_;
  ::std::string* salt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_CHHashFileVSalted_2eproto();
  friend void protobuf_AssignDesc_CHHashFileVSalted_2eproto();
  friend void protobuf_ShutdownFile_CHHashFileVSalted_2eproto();
  
  void InitAsDefaultInstance();
  static MFNHashFileSaltedProtobuf_SaltedHash* default_instance_;
};
// -------------------------------------------------------------------

class MFNHashFileSaltedProtobuf : public ::google::protobuf::Message {
 public:
  MFNHashFileSaltedProtobuf();
  virtual ~MFNHashFileSaltedProtobuf();
  
  MFNHashFileSaltedProtobuf(const MFNHashFileSaltedProtobuf& from);
  
  inline MFNHashFileSaltedProtobuf& operator=(const MFNHashFileSaltedProtobuf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MFNHashFileSaltedProtobuf& default_instance();
  
  void Swap(MFNHashFileSaltedProtobuf* other);
  
  // implements Message ----------------------------------------------
  
  MFNHashFileSaltedProtobuf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MFNHashFileSaltedProtobuf& from);
  void MergeFrom(const MFNHashFileSaltedProtobuf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MFNHashFileSaltedProtobuf_SaltedHash SaltedHash;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 hash_length_bytes = 1;
  inline bool has_hash_length_bytes() const;
  inline void clear_hash_length_bytes();
  static const int kHashLengthBytesFieldNumber = 1;
  inline ::google::protobuf::uint32 hash_length_bytes() const;
  inline void set_hash_length_bytes(::google::protobuf::uint32 value);
  
  // optional uint32 salt_length_bytes = 2;
  inline bool has_salt_length_bytes() const;
  inline void clear_salt_length_bytes();
  static const int kSaltLengthBytesFieldNumber = 2;
  inline ::google::protobuf::uint32 salt_length_bytes() const;
  inline void set_salt_length_bytes(::google::protobuf::uint32 value);
  
  // repeated .MFNHashFileSaltedProtobuf.SaltedHash salted_hash_value = 3;
  inline int salted_hash_value_size() const;
  inline void clear_salted_hash_value();
  static const int kSaltedHashValueFieldNumber = 3;
  inline const ::MFNHashFileSaltedProtobuf_SaltedHash& salted_hash_value(int index) const;
  inline ::MFNHashFileSaltedProtobuf_SaltedHash* mutable_salted_hash_value(int index);
  inline ::MFNHashFileSaltedProtobuf_SaltedHash* add_salted_hash_value();
  inline const ::google::protobuf::RepeatedPtrField< ::MFNHashFileSaltedProtobuf_SaltedHash >&
      salted_hash_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::MFNHashFileSaltedProtobuf_SaltedHash >*
      mutable_salted_hash_value();
  
  // @@protoc_insertion_point(class_scope:MFNHashFileSaltedProtobuf)
 private:
  inline void set_has_hash_length_bytes();
  inline void clear_has_hash_length_bytes();
  inline void set_has_salt_length_bytes();
  inline void clear_has_salt_length_bytes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 hash_length_bytes_;
  ::google::protobuf::uint32 salt_length_bytes_;
  ::google::protobuf::RepeatedPtrField< ::MFNHashFileSaltedProtobuf_SaltedHash > salted_hash_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_CHHashFileVSalted_2eproto();
  friend void protobuf_AssignDesc_CHHashFileVSalted_2eproto();
  friend void protobuf_ShutdownFile_CHHashFileVSalted_2eproto();
  
  void InitAsDefaultInstance();
  static MFNHashFileSaltedProtobuf* default_instance_;
};
// ===================================================================


// ===================================================================

// MFNHashFileSaltedProtobuf_SaltedHash

// optional string hash = 1;
inline bool MFNHashFileSaltedProtobuf_SaltedHash::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MFNHashFileSaltedProtobuf_SaltedHash::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MFNHashFileSaltedProtobuf_SaltedHash::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MFNHashFileSaltedProtobuf_SaltedHash::clear_hash() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& MFNHashFileSaltedProtobuf_SaltedHash::hash() const {
  return *hash_;
}
inline void MFNHashFileSaltedProtobuf_SaltedHash::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void MFNHashFileSaltedProtobuf_SaltedHash::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void MFNHashFileSaltedProtobuf_SaltedHash::set_hash(const char* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MFNHashFileSaltedProtobuf_SaltedHash::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  return hash_;
}
inline ::std::string* MFNHashFileSaltedProtobuf_SaltedHash::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string salt = 2;
inline bool MFNHashFileSaltedProtobuf_SaltedHash::has_salt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MFNHashFileSaltedProtobuf_SaltedHash::set_has_salt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MFNHashFileSaltedProtobuf_SaltedHash::clear_has_salt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MFNHashFileSaltedProtobuf_SaltedHash::clear_salt() {
  if (salt_ != &::google::protobuf::internal::kEmptyString) {
    salt_->clear();
  }
  clear_has_salt();
}
inline const ::std::string& MFNHashFileSaltedProtobuf_SaltedHash::salt() const {
  return *salt_;
}
inline void MFNHashFileSaltedProtobuf_SaltedHash::set_salt(const ::std::string& value) {
  set_has_salt();
  if (salt_ == &::google::protobuf::internal::kEmptyString) {
    salt_ = new ::std::string;
  }
  salt_->assign(value);
}
inline void MFNHashFileSaltedProtobuf_SaltedHash::set_salt(const char* value) {
  set_has_salt();
  if (salt_ == &::google::protobuf::internal::kEmptyString) {
    salt_ = new ::std::string;
  }
  salt_->assign(value);
}
inline void MFNHashFileSaltedProtobuf_SaltedHash::set_salt(const char* value, size_t size) {
  set_has_salt();
  if (salt_ == &::google::protobuf::internal::kEmptyString) {
    salt_ = new ::std::string;
  }
  salt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MFNHashFileSaltedProtobuf_SaltedHash::mutable_salt() {
  set_has_salt();
  if (salt_ == &::google::protobuf::internal::kEmptyString) {
    salt_ = new ::std::string;
  }
  return salt_;
}
inline ::std::string* MFNHashFileSaltedProtobuf_SaltedHash::release_salt() {
  clear_has_salt();
  if (salt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = salt_;
    salt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MFNHashFileSaltedProtobuf

// optional uint32 hash_length_bytes = 1;
inline bool MFNHashFileSaltedProtobuf::has_hash_length_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MFNHashFileSaltedProtobuf::set_has_hash_length_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MFNHashFileSaltedProtobuf::clear_has_hash_length_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MFNHashFileSaltedProtobuf::clear_hash_length_bytes() {
  hash_length_bytes_ = 0u;
  clear_has_hash_length_bytes();
}
inline ::google::protobuf::uint32 MFNHashFileSaltedProtobuf::hash_length_bytes() const {
  return hash_length_bytes_;
}
inline void MFNHashFileSaltedProtobuf::set_hash_length_bytes(::google::protobuf::uint32 value) {
  set_has_hash_length_bytes();
  hash_length_bytes_ = value;
}

// optional uint32 salt_length_bytes = 2;
inline bool MFNHashFileSaltedProtobuf::has_salt_length_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MFNHashFileSaltedProtobuf::set_has_salt_length_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MFNHashFileSaltedProtobuf::clear_has_salt_length_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MFNHashFileSaltedProtobuf::clear_salt_length_bytes() {
  salt_length_bytes_ = 0u;
  clear_has_salt_length_bytes();
}
inline ::google::protobuf::uint32 MFNHashFileSaltedProtobuf::salt_length_bytes() const {
  return salt_length_bytes_;
}
inline void MFNHashFileSaltedProtobuf::set_salt_length_bytes(::google::protobuf::uint32 value) {
  set_has_salt_length_bytes();
  salt_length_bytes_ = value;
}

// repeated .MFNHashFileSaltedProtobuf.SaltedHash salted_hash_value = 3;
inline int MFNHashFileSaltedProtobuf::salted_hash_value_size() const {
  return salted_hash_value_.size();
}
inline void MFNHashFileSaltedProtobuf::clear_salted_hash_value() {
  salted_hash_value_.Clear();
}
inline const ::MFNHashFileSaltedProtobuf_SaltedHash& MFNHashFileSaltedProtobuf::salted_hash_value(int index) const {
  return salted_hash_value_.Get(index);
}
inline ::MFNHashFileSaltedProtobuf_SaltedHash* MFNHashFileSaltedProtobuf::mutable_salted_hash_value(int index) {
  return salted_hash_value_.Mutable(index);
}
inline ::MFNHashFileSaltedProtobuf_SaltedHash* MFNHashFileSaltedProtobuf::add_salted_hash_value() {
  return salted_hash_value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MFNHashFileSaltedProtobuf_SaltedHash >&
MFNHashFileSaltedProtobuf::salted_hash_value() const {
  return salted_hash_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::MFNHashFileSaltedProtobuf_SaltedHash >*
MFNHashFileSaltedProtobuf::mutable_salted_hash_value() {
  return &salted_hash_value_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CHHashFileVSalted_2eproto__INCLUDED
